<program>            ::= <declaration-list>
<declaration-list>   ::= <declaration> <declaration-list> | ε
<declaration>        ::= <var-declaration> | <fun-declaration>
<var-declaration>    ::= <type-specifier> ID ';'
                      | <type-specifier> ID '[' NUM ']' ';'
<fun-declaration>    ::= <type-specifier> ID '(' <params> ')' <compound-stmt>
<type-specifier>     ::= 'int' | 'void'
<params>             ::= <param-list> | 'void'
<param-list>         ::= <param> | <param> ',' <param-list>
<param>              ::= <type-specifier> ID
                      | <type-specifier> ID '[' ']'
<compound-stmt>      ::= '{' <local-declarations> <statement-list> '}'
<local-declarations> ::= <local-declaration> <local-declarations> | ε
<local-declaration>  ::= <var-declaration>
<statement-list>     ::= <statement> <statement-list> | ε
<statement>          ::= <expression-stmt>
                      | <compound-stmt>
                      | <selection-stmt>
                      | <iteration-stmt>
                      | <return-stmt>
<expression-stmt>    ::= <expression> ';' | ';'
<selection-stmt>     ::= 'if' '(' <expression> ')' <statement>
                      | 'if' '(' <expression> ')' <statement> 'else' <statement>
<iteration-stmt>     ::= 'while' '(' <expression> ')' <statement>
<return-stmt>        ::= 'return' ';' | 'return' <expression> ';'
<expression>         ::= <var> '=' <expression>
                      | <simple-expression>
<var>                ::= ID | ID '[' <expression> ']'
<simple-expression>  ::= <additive-expression> <relop> <additive-expression>
                      | <additive-expression>
<relop>              ::= '<' | '<=' | '>' | '>=' | '==' | '!='
<additive-expression>::= <term> | <additive-expression> <addop> <term>
<addop>              ::= '+' | '-'
<term>               ::= <factor> | <term> <mulop> <factor>
<mulop>              ::= '*' | '/'
<factor>             ::= '(' <expression> ')' | <var> | <call> | NUM
                        | '-' <factor>
                        | '!' <factor>
<call>               ::= ID '(' <args> ')'
<args>               ::= <arg-list> | ε
<arg-list>           ::= <expression> | <expression> ',' <arg-list>